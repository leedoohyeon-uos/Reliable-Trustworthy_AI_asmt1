################################################
# Logistic Regression
# Made By: Lee Doo Hyeon
################################################

import numpy as np
import copy
import matplotlib.pyplot as plt
import h5py
import scipy
from PIL import Image
from scipy import ndimage
import matplotlib.pyplot as plt
import importlib
from lr_utils import load_dataset
from public_tests import *

plt.ion() 
importlib.reload(lr_utils)  # lr_utils 모듈을 재로드
data = load_dataset() # 데이터셋 로드

# Loading the data (cat/non-cat)
train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()

##########################################################
# 데이터 전처리
##########################################################

# 데이터 파악
m_train = train_set_x_orig.shape[0] # 테스트 데이터 수
m_test = test_set_x_orig.shape[0]   # 트레인 데이터 수
num_px = train_set_x_orig.shape[1]  # 훈련 이미지의 높이(=너비)

# 데이터 평탄화 (flatten)  -> 데이터 펴주기
# Reshape the training and test examples
train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T

# 데이터 standardization (표준화)
train_set_x = train_set_x_flatten / 255. # 보통 whole numpy array로 나눠주는데 이미지의 경우 255로 나누는 것이 효과적
test_set_x = test_set_x_flatten / 255.

##########################################################
# 함수 구현
##########################################################

# 평가함수(GRADED FUNCTION) : sigmoid
def sigmoid(z):
    s = 1/(1+np.exp(-z))
    return s

# GRADED FUNCTION: 변수 초기화 (initialize_with_zeros)
def initialize_with_zeros(dim):
    w = np.zeros((dim, 1))
    b = 0.0
    return w, b

##########################################################
# 파라미터 학습
##########################################################

# GRADED FUNCTION: propagate
def propagate(w, b, X, Y):

    m = X.shape[1]
    
    # FORWARD PROPAGATION (순전파)
    A = sigmoid(np.dot(w.T, X) + b) 

    cost = -(1/m) * np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A))

    # BACKWARD PROPAGATION (역전파)
    dw = (1/m) * np.dot(X, (A - Y).T)  
    db = (1/m) * np.sum(A - Y)      
    

    cost = np.squeeze(np.array(cost))

    grads = {"dw": dw,
             "db": db}
    
    return grads, cost


# GRADED FUNCTION: optimize (최적화)
# 경사 하강법(gradient descent)을 이용하여 매개변수 업데이트 -> 목표 : Cost Function 최소화
def optimize(w, b, X, Y, num_iterations=100, learning_rate=0.009, print_cost=False):
    
    w = copy.deepcopy(w)
    b = copy.deepcopy(b)
    
    costs = []
    
    for i in range(num_iterations):

        grads, cost = propagate(w, b, X, Y)
        
        # 기울기 꺼내오기
        dw = grads["dw"] 
        db = grads["db"]
        
        # rule 업데이트
        w = w - learning_rate * dw  
        b = b - learning_rate * db  
        
        # Record the costs
        if i % 100 == 0:
            costs.append(cost)
        
            # # Print the cost every 100 training iterations
            # if print_cost:
            #     print ("Cost after iteration %i: %f" %(i, cost))
    
    params = {"w": w,
              "b": b}
    
    grads = {"dw": dw,
             "db": db}
    
    return params, grads, costs


##########################################################
# 레이블 예측
##########################################################

# GRADED FUNCTION: predict
def predict(w, b, X):
    
    m = X.shape[1]
    Y_prediction = np.zeros((1, m))
    w = w.reshape(X.shape[0], 1)
    
    A = sigmoid(np.dot(w.T, X) + b)
    
    for i in range(A.shape[1]):

        if A[0, i] > 0.5: 
            Y_prediction[0, i] = 1
        else: 
            Y_prediction[0, i] = 0

    return Y_prediction


##########################################################
# 앞에서 구현한 모든 함수들을 결합하여 전체 모델 구동동
##########################################################

# GRADED FUNCTION: model

def model(X_train, Y_train, X_test, Y_test, num_iterations=2000, learning_rate=0.5, print_cost=False):
    
    w, b = initialize_with_zeros(X_train.shape[0])
    
    params, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    
    w = params["w"]
    b = params["b"]
    
    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)
    
    # Print train/test Errors
    if print_cost:
        print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
        print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))

    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d

from public_tests import *
model_test(model)

logistic_regression_model = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations=2000, learning_rate=0.005, print_cost=True)

# # Example of a picture that was wrongly classified.
# index = 1
# plt.imshow(test_set_x[:, index].reshape((num_px, num_px, 3)))
# print ("y = " + str(test_set_y[0,index]) + ", you predicted that it is a \"" + classes[int(logistic_regression_model['Y_prediction_test'][0,index])].decode("utf-8") +  "\" picture.")

# # Plot learning curve (with costs)
# costs = np.squeeze(logistic_regression_model['costs'])
# plt.plot(costs)
# plt.ylabel('cost')
# plt.xlabel('iterations (per hundreds)')
# plt.title("Learning rate =" + str(logistic_regression_model["learning_rate"]))
# plt.show()